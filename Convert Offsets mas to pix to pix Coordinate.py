# Convert Inquired Positions offsets from marcsec, to pixels & calculate expected Pixel coordinates (X, Y)
# Expected to read the format generated by "inquiry positions" script
# Need a reference table of Sgr A* pixel coordinate positions

#=============================================================
#=============================================================

# Part I: Converting RA/DEC offsets from marcsec to pixel unit

# import the "inquired positions" file & Generate 2 output results
inquired_positions = open("inquired offsets.txt", 'r')
output_offset_pixel_file = open("inquired offsets converted in pixel.txt", 'w+')

# Temporary working lists
list_offsets_pix = []
list_offsets_pix_str = []

# Preparing an output file header

for i, mas_offsets in enumerate(inquired_positions.readlines()):
    if i < 7:
        print(mas_offsets)
        output_offset_pixel_file.write(mas_offsets)
    
    if i == 8:
        output_title = "Here are the Dates & offsets from Sag A* inquried for this orbit:\nDates\tX-axis (pix)\tY-axis (pix)\n"
        print(output_title)
        output_offset_pixel_file.write(output_title)
    
# starting at 10th line, where the imported offsets in marcsec are  
# entire line is read as one single string, need to split it into 3 values
# print(type(split_line)) --> split_line gives in  a list

    if i >= 9:
        split_mas_offsets = mas_offsets.replace('\n', '').split("\t")

# the dates do not need to be changed
        for j, index in enumerate(split_mas_offsets):
            if j == 0:
                list_offsets_pix.append(round(float(index), 3))    

# RA is inverted from X-axis                
            elif j == 1:
                number_pixel = round(float(index)/-13.3, 5)
                list_offsets_pix.append(number_pixel)
                
# DEC is not inverted             
            elif j == 2:
                number_pixel = round(float(index)/13.3, 5)
                list_offsets_pix.append(number_pixel)
        
        for output_offsets_pix in list_offsets_pix:
            list_offsets_pix_str.append(str(output_offsets_pix))

# write the result to output file
# Format: "Dates (3 decimals), X, Y (in pixel)"

        output_offset_pixel_file.write('\t'.join(list_offsets_pix_str))
        output_offset_pixel_file.write("\n")
        print(list_offsets_pix)
        
        list_offsets_pix.clear()
        list_offsets_pix_str.clear()
        
#=============================================================        
# close all files
inquired_positions.close()
output_offset_pixel_file.close()
        
#=============================================================
#=============================================================   

# Part II: using the pixel positions of Sgr A*, calculate the expected pixel coordinates
# enumerate function cannot be used twice

SagA_pix_coordinates = open("Sag A Pixel Coordinates.txt", 'r')
output_offset_pixel_file = open("inquired offsets converted in pixel.txt", 'r')
output_coordinates_pixel_file = open("positions in pixel coordinates.txt", 'w+')

list_offsets_pix_float = []
list_sagA_coord_float = []
list_calcuated_coord = []

#=============================================================  
# Preparing an output file header

for i, pix_offsets in enumerate(output_offset_pixel_file.readlines()):
    if i < 7:
        print(pix_offsets)
        output_coordinates_pixel_file.write(pix_offsets)
    
    if i == 8:
        output_title = "Here are the Dates & pixel coordinates in FITS files inquried for this orbit:\nDates\tX (pix)\tY (pix)\n"
        print(output_title)
        output_coordinates_pixel_file.write(output_title)

        
# Put the offsets in a list        
    # starting at 10th line, where the imported offsets in pixel are
    # entire line is read as one single string, need to split it into 3 values
    # print(type(split_line)) --> split_line gives in  a list

    if i > 8:
        split_pix_offsets = pix_offsets.replace('\n', '').split("\t")
        # convert them to float for numerical operations
        for offset in split_pix_offsets:
            list_offsets_pix_float.append(float(offset))
             
                
# Put the Sag A coordinates in a list                
# starting at 3rd line, ignore headers

for k, sagA_coord in enumerate(SagA_pix_coordinates.readlines()):
    if k >= 2:
        split_sagA_coord = sagA_coord.replace('\n', '').split("\t")
        # convert them to float for numerical operations
        for SagA in split_sagA_coord:
            list_sagA_coord_float.append(float(SagA))        

            
# iterate and add both lists together            
            
for index, (a, b) in enumerate(zip(list_offsets_pix_float, list_sagA_coord_float)):
    date_index = 3
    # dont change the dates
    if index % date_index == 0:
        list_calcuated_coord.append(a)
    else:       
        list_calcuated_coord.append(round((a+b), 2))

print(list_calcuated_coord)    


# write the result to output file
# Format: "Dates (3 decimals), X, Y (in pixel)"

for index, coordinate in enumerate(list_calcuated_coord):
    new_line_every = 3
    if index % new_line_every == 2:
        output_coordinates_pixel_file.write("%s\n" % coordinate)
    else:
        output_coordinates_pixel_file.write("%s\t" % coordinate)
    
    
#=============================================================   
        
# close all files
SagA_pix_coordinates.close()
output_offset_pixel_file.close()
output_coordinates_pixel_file.close()

